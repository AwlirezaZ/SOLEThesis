// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SOFEThesis.Context;

#nullable disable

namespace SOFEThesis.Migrations
{
    [DbContext(typeof(SofeThesisContext))]
    partial class SofeThesisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SOFEThesis.Domain.Conditions.CompoundCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FirstFacePictureId")
                        .HasColumnType("bigint");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("PictureId")
                        .HasColumnType("bigint");

                    b.Property<long>("SecondFacePictureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FirstFacePictureId")
                        .IsUnique();

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.HasIndex("SecondFacePictureId")
                        .IsUnique();

                    b.ToTable("CompoundConditions");
                });

            modelBuilder.Entity("SOFEThesis.Domain.Conditions.FaceCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FacePictureId")
                        .HasColumnType("bigint");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FacePictureId")
                        .IsUnique();

                    b.ToTable("FaceConditions");
                });

            modelBuilder.Entity("SOFEThesis.Domain.Conditions.SelfCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("PictureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.ToTable("SelfConditions");
                });

            modelBuilder.Entity("SOFEThesis.Domain.FacePicture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FacePictures");
                });

            modelBuilder.Entity("SOFEThesis.Domain.Picture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AmbiguousSituation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("SOFEThesis.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Age")
                        .HasColumnType("bigint");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SOFEThesis.Domain.Conditions.CompoundCondition", b =>
                {
                    b.HasOne("SOFEThesis.Domain.FacePicture", "FirstFacePicture")
                        .WithOne()
                        .HasForeignKey("SOFEThesis.Domain.Conditions.CompoundCondition", "FirstFacePictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOFEThesis.Domain.Picture", "Picture")
                        .WithOne()
                        .HasForeignKey("SOFEThesis.Domain.Conditions.CompoundCondition", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOFEThesis.Domain.FacePicture", "SecondFacePicture")
                        .WithOne()
                        .HasForeignKey("SOFEThesis.Domain.Conditions.CompoundCondition", "SecondFacePictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstFacePicture");

                    b.Navigation("Picture");

                    b.Navigation("SecondFacePicture");
                });

            modelBuilder.Entity("SOFEThesis.Domain.Conditions.FaceCondition", b =>
                {
                    b.HasOne("SOFEThesis.Domain.FacePicture", "FacePicture")
                        .WithOne()
                        .HasForeignKey("SOFEThesis.Domain.Conditions.FaceCondition", "FacePictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacePicture");
                });

            modelBuilder.Entity("SOFEThesis.Domain.Conditions.SelfCondition", b =>
                {
                    b.HasOne("SOFEThesis.Domain.Picture", "Picture")
                        .WithOne()
                        .HasForeignKey("SOFEThesis.Domain.Conditions.SelfCondition", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Picture");
                });
#pragma warning restore 612, 618
        }
    }
}
